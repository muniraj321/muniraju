program 1:
public class biggestthreenumcmd {
public static void main(String[] args) {
int a=Integer.parseInt(args[0]);
int b=Integer.parseInt(args[1]);
int c=Integer.parseInt(args[2]);
if(a>b && a>c)
{
System.out.println("a is large"+a);
}
else if(b>a && b>c)
{
System.out.println("b is large "+b);
}
else
{
System.out.println("c is large "+c);
}
}
}



program 2:
import java.util.Scanner;
class factorial {
public static void main(String[] args) {
int n,i,fact=1;
Scanner scan=new Scanner(System.in);
System.out.print("Enter the number: ");
n=scan.nextInt();
for(i=1;i<=n;i++)
fact=fact*i;
System.out.println("The factorial of " + n + " is: " + fact);
}
}


program 3:
import java.util.Scanner;

public class sumofdigits {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		
		System.out.print("Enter the number: ");
		int n=scan.nextInt();
		
		int temp=n;
		int sum=0;
		int rev=0;
		
		while(n>0)
		{
			int rem=n%10;
			sum= sum+rem;
			rev=rev*10+rem;
			n=n/10;
		}
		System.out.println("The sum of " + temp + " is: " + sum);
		if(rev==temp)
		{
			System.out.println(temp + " is a palindrome");
		}
		else
		{
			System.out.println(temp + " is not a palindrome");
		}
	}

}


program 4:
import java.util.Arrays;  
import java.util.Scanner;

public class Sort_Array  
{  
   public static void main(String args[])   
   {  
      Scanner sc=new Scanner(System.in);
      Scanner sc1=new Scanner(System.in);
      int n;
      System.out.println("Enter the number of elements ");
      n=sc.nextInt();
      String str[]=new String[n]; 
      System.out.println("Enter the String ");
      for(int i=0; i<n ;i++) 
      {
          str[i]=sc1.nextLine();
      }
      Arrays.sort(str);
      System.out.println(Arrays.toString(str));
   }  
}



program 5:
import java.util.Scanner;
class MatrixMultiplication{
public static void main(String args[]){
          int m, n, p, q, sum = 0, c, d, k;     
          Scanner in = new Scanner(System.in);
          System.out.println("Enter the number of rows and columns of first matrix");
          m = in.nextInt();
          n = in.nextInt();
          int first[][] = new int[m][n];
          System.out.println("Enter elements of first matrix");
          for (c = 0; c < m; c++)
             for (d = 0; d < n; d++)
                first[c][d] = in.nextInt();
          System.out.println("Enter the number of rows and columns of second matrix");
          p = in.nextInt();
          q = in.nextInt();
     
          if (n != p)
             System.out.println("The matrices can't be multiplied with each other.");
          else
          {
             int second[][] = new int[p][q];
             int multiply[][] = new int[m][q];
     
             System.out.println("Enter elements of second matrix");
     
             for (c = 0; c < p; c++)
                for (d = 0; d < q; d++)
                   second[c][d] = in.nextInt();
     
             for (c = 0; c < m; c++)
             {
                for (d = 0; d < q; d++)
                {  
                   for (k = 0; k < p; k++)
                   {
                      sum = sum + first[c][k]*second[k][d];
                   }
     
                   multiply[c][d] = sum;
                   sum = 0;
                }
             }
     
             System.out.println("Product of the matrices:");
     
             for (c = 0; c < m; c++)
             {
                for (d = 0; d < q; d++)
                   System.out.print(multiply[c][d]+"\t");
     
                System.out.print("\n");
             }
          }
       }
    }


program 6:
import java.util.*;

public class methodoverload {
void add(int a, int b) {
System.out.println("The sum of " + a + " and " + b + " : " + (a + b));
}

void add(String s1, String s2) {
System.out.println("The sum of " + s1+ " and " + s2 + " : " + (s1 + s1));
}

public static void main(String[] args) {
methodoverload obj = new methodoverload();
o.add(23,12);
a.add("reva","university");
}
}

program 7:
class Rectangle{
int length;
int width;
void area(){
System.out.println("area="+(length*width));
}
Rectangle()
{
length=10;
width=10;
}
Rectangle(int a)
{
length=1;
width=b;
}
Rectangle(int a,int b)
{
length=a;
width=b;
}
}

class Const_over{
public static void main(String args[]){
Rectangle r1=new Rectangle();
Rectangle r2=new Rectangle(5);
Rectangle r3=new Rectangle(20,10);
System.out.println("");
r1.area();
r2.area();
r3.area();
}
}

program 8:
class Car {
  String name;
  public void drive() {
    System.out.println("Executing drive() from Car class: I can drive");
  }
}
class Maruthi extends Car {
  public void display() {
    System.out.println("My name is " + name);
  }
}
class Simple_Inheritance_Demo {
  public static void main(String[] args) {
    Maruthi Maruthi_Obj = new Maruthi();
    Maruthi_Obj.name = "Maruthi ALTO";
    Maruthi_Obj.display();
    Maruthi_Obj.drive();

  }
}

//8b
import java.io.*;
import java.lang.*;
import java.util.*;

class Parent_one {
	public void prints_parent()
	{
		System.out.println("REVA");
	}
}

class Parent_two extends Parent_one {
	public void print_for() { System.out.println("University"); }
}

class Child_class extends Parent_two {
	public void prints()
	{
		System.out.println("Bangalore");
	}
}

// Drived class
public class 8a.multiinherite {
	public static void main(String[] args)
	{
		Child_class g = new Child_class();
		g.prints_parent(); 
		g.print_for();
		g.prints();
	}
}

program 9:
abstract class Bike{
abstract void run();
}
class
Honda4 extends Bike{
void run(){
System.out.println("implemented run method here");
}
public static void main(String args[]){
Bike b=new Honda4();
b.run();
}
}

program 10:
class A{
void display()
{
System.out.println("this is a base class");
}
}
class B extends A
{
void display()
{
super.display();
System.out.println("This is a child class");
}
}
class Method_Override{
public static void main(String args[]){
B b=new B();
b.display();
}
}

program 11:
package Mypackage;
public class classA
{
public void display()
{
System.out.println("Inside class A");
}
}

import Mypackage.classA;
class classB
{
public static void main(String args[]){
classA obj=new classA();
obj.display();
}
}

javac -d . classA.java
javac classb.java
java classb




